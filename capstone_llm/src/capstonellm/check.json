{
    "title": "Airflow backfill clarification",
    "question_body": "<p>I'm just getting started with Airbnb's <a href=\"http://nerds.airbnb.com/airflow/\" rel=\"noreferrer\">airflow</a>, and I'm still not clear on how/when backfilling is done.  </p>\n\n<p>Specifically, there are 2 use-cases that confuse me:</p>\n\n<ol>\n<li><p>If I run <code>airflow scheduler</code> for a few minutes, stop it for a minute, then restart it again, my DAG seems to run extra tasks for the first 30 seconds or so, then it continues as normal (runs every 10 sec).  Are these extra tasks \"backfilled\" tasks that weren't able to complete in an earlier run?  If so, how would I tell airflow not to backfill those tasks? </p></li>\n<li><p>If I run <code>airflow scheduler</code> for a few minutes, then run <code>airflow clear MY_tutorial</code>, then restart <code>airflow scheduler</code>, it seems to run a TON of extra tasks.  Are these tasks also somehow \"backfilled\" tasks?  Or am I missing something.</p></li>\n</ol>\n\n<p>Currently, I have a very simple dag: </p>\n\n<pre class=\"lang-py prettyprint-override\"><code>default_args = {\n    'owner': 'me',\n    'depends_on_past': False,\n    'start_date': datetime(2016, 10, 4),\n    'email': ['airflow@airflow.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n    # 'queue': 'bash_queue',\n    # 'pool': 'backfill',\n    # 'priority_weight': 10,\n    # 'end_date': datetime(2016, 1, 1),\n}\n\ndag = DAG(\n    'MY_tutorial', default_args=default_args, schedule_interval=timedelta(seconds=10))\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\nt1 = BashOperator(\n    task_id='print_date',\n    bash_command='date',\n    dag=dag)\n\nt2 = BashOperator(\n    task_id='sleep',\n    bash_command='sleep 5',\n    retries=3,\n    dag=dag)\n\ntemplated_command = \"\"\"\n    {% for i in range(5) %}\n        echo \"{{ ds }}\"\n        echo \"{{ macros.ds_add(ds, 8)}}\"\n        echo \"{{ params.my_param }}\"\n    {% endfor %}\n\"\"\"\n\nt3 = BashOperator(\n    task_id='templated',\n    bash_command=templated_command,\n    params={'my_param': 'Parameter I passed in'},\n    dag=dag)\n\nsecond_template = \"\"\"\n    touch ~/airflow/logs/test\n    echo $(date) &gt;&gt; ~/airflow/logs/test\n\"\"\"\n\nt4 = BashOperator(\n    task_id='write_test',\n    bash_command=second_template,\n    dag=dag)\n\nt1.set_upstream(t4)\nt2.set_upstream(t1)\nt3.set_upstream(t1)\n</code></pre>\n\n<p>The only two things I've changed in my airflow config are</p>\n\n<ol>\n<li>I changed from using a sqlite db to using a postgres db</li>\n<li>I'm using a <code>CeleryExecutor</code> instead of a <code>SequentialExecutor</code></li>\n</ol>\n\n<p>Thanks so much for you help!</p>\n",
    "response_body": "<p>When you change the scheduler toggle to &quot;on&quot; for a DAG, the scheduler will trigger a backfill of all dag run instances for which it has no status recorded, starting with the start_date you specify in your &quot;default_args&quot;.</p>\n<p>For example: If the start date was &quot;2017-01-21&quot; and you turned on the scheduling toggle at &quot;2017-01-22T00:00:00&quot; and your dag was configured to run hourly, then the scheduler will backfill 24 dag runs and then start running on the scheduled interval.</p>\n<p>This is essentially what is happening in both of your question. In #1, it is filling in the 3 missing runs from the 30 seconds which you turned off the scheduler. In #2, it is filling in all of the DAG runs from start_date until &quot;now&quot;.</p>\n<p>There are 2 ways around this:</p>\n<ol>\n<li>Set the start_date to a date in the future so that it will only start scheduling dag runs once that date is reached. Note that if you change the start_date of a DAG, you must change the name of the DAG as well due to the way the start date is stored in airflow's DB.</li>\n<li>Manually run backfill <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/cli-and-env-variables-ref.html#backfill\" rel=\"noreferrer\">from the command line</a> with the &quot;-m&quot; (--mark-success) flag which tells airflow not to actually run the DAG, rather just mark it as successful in the DB.</li>\n</ol>\n<p>e.g.</p>\n<pre><code>airflow backfill MY_tutorial -m -s 2016-10-04 -e 2017-01-22T14:28:30\n</code></pre>\n",
    "link": "https://stackoverflow.com/questions/39882204/airflow-backfill-clarification"
}